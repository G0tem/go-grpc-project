version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  grafana:
    image: grafana/grafana
    user: root
    restart: always
    ports:
      - 3000:3000
    volumes:
      - ./base/grafana:/var/lib/grafana
      - ./base/grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
    networks:
      - app_network

  influxdb:
    image: influxdb
    container_name: influxdb
    env_file:
      - influx.env
    volumes:
      - ./base/influx:/var/lib/influxdb2:rw
    ports:
      - "8086:8086"
    networks:
      - app_network

  telegraf:
    image: telegraf
    container_name: telegraf
    depends_on:
      - influxdb
    volumes:
      - ./base/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    env_file:
      - influx.env
    networks:
      - app_network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "5433:5433"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
      PGADMIN_LISTEN_PORT: 5433
      PGADMIN_DEFAULT_SERVER: postgres_db
    volumes:
      - ./base/pgadmin_data:/var/lib/pgadmin
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - app_network
    depends_on:
      - postgres_db

  postgres_db:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - app_network
    volumes:
      - ./base/postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  prometheus:
    image: prom/prometheus:v2.42.0
    ports:
      - "9090:9090"
    # Change 127.0.0.1 to ip address of node where docker satck is deployed     
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus" 
      - "--web.external-url=http://127.0.0.1:9090"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries" 
      - "--web.console.templates=/usr/share/prometheus/consoles"
    volumes:
      - ./base/prom-data:/prometheus
      - ./configs/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network
      

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    # Change 127.0.0.1 to ip address of node where docker satck is deployed 
    command: 
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager" 
      - "--web.external-url=http://127.0.0.1:9093"      
    volumes:
      - ./base/alert-data:/alertmanager
      - ./configs/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./configs/myorg.tmpl:/etc/alertmanager/templates/myorg.tmpl
    networks:
      - app_network
      

  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: node-exporter1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - app_network
      
      
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor1
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_network